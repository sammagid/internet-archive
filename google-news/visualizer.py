import pandas as pd
from tqdm import tqdm
import os
import ast

DATA_PATH = "/Users/sam/internet-archive/google-news/outputs/07-15-2025/07-15-2025_en-US_US_US-en_split.csv"

def convert_to_markdown(df, filename):
    """
    Converts a dataset output from googleNews.py into a nice markdown string.

    Args:
        df (pandas.DataFrame): Dataset outputted from googleNews.py, with columns:
                             - 'title': Title of news headline.
                             - 'news-outlet': News outlet source.
                             - 'url': Link to the article.
                             - 'answers': Dictionary of questions, answers, and citations.
        filename (str): Name of file read from.
 
    Returns:
        str: Markdown formatted string displaying all headlines, questions, and answers.
    """
    # initialize output string with title and description
    output = f"# Output from {filename}\n"
    output += "\nThese are the top stories from Google News, along with the questions and answers generated by Perplexity.\n"
    # iterate over each row in dataframe
    for i, row in df.iterrows():
        # add title with link
        title = df.at[i, "title"]
        outlet = df.at[i, "news-outlet"]
        url = df.at[i, "url"]
        output += f"\n## [{title} ({outlet})]({url})\n"
        # add questions and answers
        qas = df.at[i, "answers"]
        qas_parsed = ast.literal_eval(qas)
        for qa in qas_parsed:
            # parse the question dictionary
            question = qa['question']
            answer = qa['answer']
            citations = qa['citations']
            # add to markdown string
            output += f"\n### {question}\n"
            output += f"\n{answer}\n"
            output += f"\nCitations: {", ".join(citations)}\n"
    
    return output

def main():
    # open and read dataset
    df = pd.read_csv(DATA_PATH)
    filename = os.path.basename(DATA_PATH)

    # convert to markdown string
    md = convert_to_markdown(df, filename)

    # save to file
    file_out = f"{os.path.splitext(DATA_PATH)[0]}.md"
    with open(file_out, 'w') as file:
        file.write(md)

if __name__ == "__main__":
    main()